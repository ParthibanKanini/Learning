/**
 * Async and Await in JavaScript is used to handle asynchronous operations
 * in a more readable and manageable way.
 *
 */

console.log("\n Async/Await (Modern Promise handling):");
console.log("-----------------------------------------");

async function demonstrateAsyncAwait() {
  try {
    console.log(" Starting async operation...");

    let result1 = await fetchUserData("https://reqres.in/api/users?page=2");
    console.log(" Async result 1:", result1.name);

    let result2 = await processFile("data.txt");
    console.log(" Async result 2:", result2);

    console.log(" All async operations completed!");
  } catch (error) {
    console.log(" Async error:", error);
  }
}

// Call the async function
demonstrateAsyncAwait();

// Implementation of fetchUserData function
async function fetchUserData(url) {
  return new Promise((resolve, reject) => {
    // Simulate network delay
    setTimeout(() => {
      // Simulate API response based on URL
      if (url.includes("users")) {
        // Simulate successful API response
        const userData = {
          id: Math.floor(Math.random() * 100) + 1,
          name: "Parthiban Chinnakkannan",
          email: "parthiban.chinnakkannan@sample.com",
          status: "active",
          timestamp: new Date().toISOString(),
        };

        console.log("API call successful:", url);
        resolve(userData);
      } else {
        // Simulate API error
        reject(new Error("Invalid API endpoint: " + url));
      }
    }, Math.random() * 1000 + 500); // Random delay between 500-1500ms
  });
}

// Implementation of processFile function
async function processFile(filename) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (filename.endsWith(".txt")) {
        // Simulating file processing
        resolve(
          `File '${filename}' processed successfully at ${new Date().toLocaleTimeString()}`
        );
      } else {
        reject(new Error(`Unsupported file type: ${filename}`));
      }
    }, 800);
  });
}
